{
    use strict;
    use warnings;
    use esmith::ConfigDB;
    use File::Find;

    my $db = esmith::ConfigDB->open_ro();
    my $groupAdmins = $db->get_prop('admins','group') || 'domain admins';

    sub uniq {
        my %seen;
        grep !$seen{lc($_)}++, @_;
    }

    # Here make links between system and API
    # when system needs several API
    # when system name doesn't match API name
    my %controllers = (
        "disk-usage"        => ["NSAPI_SYSTEM_DISK_USAGE"],
        "certificates"      => ["NSAPI_SYSTEM_CERTIFICATES"],
        "dns"               => ["NSAPI_SYSTEM_DNS"],
        "dhcp"              => ["NSAPI_SYSTEM_DHCP"],
        "backup"            => ["NSAPI_SYSTEM_BACKUP"],
        "services"          => ["NSAPI_SYSTEM_SERVICES"],
        "users-groups"      => ["NSAPI_SYSTEM_USERS_GROUPS"],
        "network"           => ["NSAPI_SYSTEM_NETWORK"],
        "ssh"               => ["NSAPI_SYSTEM_SSH"],
        "tls-policy"        => ["NSAPI_SYSTEM_TLS_POLICY"],
        "trusted-networks"  => ["NSAPI_SYSTEM_TRUSTED_NETWORKS"],
        "logs"              => ["NSAPI_SYSTEM_LOGS"],
        "subscription"      => ["NSAPI_SYSTEM_SUBSCRIPTION"]
    );

    my @Keys = split(',', $db->get_prop('cockpit.socket','delegation') || '');
    my @applications = ();

    foreach (@Keys) {

        my @roles = ();
        my @commands =();

        my @props = split(':',$_);
        if ($props[1]) { # find if we have at least one delegation
            my $group = shift(@props);
            foreach (@props) {
                push @roles, $_ ;
            }

            # Hack when the group name gets a space
            # for example 'domain admins', visudo doesn't like it
            (my $Cmnd_Alias = $group) =~ s/ //;
            $group =~ s/ /\\ /;

            $OUT .= "\n#\n# Role delegations for $group\n#";

            foreach my $role (@roles) {

                if (! exists $controllers{$role}){
                    if ($role =~ /^nethserver-/) {
                        push @applications, $role;
                        $role =~ s/-/_/g;
                        push @commands, uc "APP_$role";
                    }
                } else {
                    foreach my $api (@{$controllers{$role}}) {
                        push @commands, $api;
                    }
                }
            }

            $OUT .= "\n\n%".$group." ALL=NOPASSWD: ". join (', ',@commands);;
            $OUT .= "\n# server-manager does not require a tty";
            $OUT .= "\nDefaults:%".$group." !requiretty\n";
        }
    }

    #Enable API for applications when the apps has been delegated at least one time
    foreach (uniq @applications) {
        # here we list all API inside the nethserver-* of the application
        my @files;
        my @dirpath=qw(/usr/libexec/nethserver/api/).$_;

        find(sub {
                push @files,$File::Find::name if (-d $File::Find::name );
        }, @dirpath);

        my @CmndAlias =();
        foreach ((@files)) {
            foreach ( glob($_.'/*')) {
                push @CmndAlias, $_ if (-f $_);
            }
        }
        #sudo do not like '-'
        $_ =~ s/-/_/g;
        $OUT .= "\n".'Cmnd_Alias APP_'.uc $_.' = \\';

        # we start the counter, sudoers file must not be ended with a ', \'
        my $count = 1;

        foreach (@CmndAlias) {
            my $countarray = scalar @CmndAlias;
            $OUT.= "\n    ";
            $OUT.= $_.', \\' if ($count < $countarray);
            $OUT.= $_."\n" if ($count == $countarray);
            $count++;
        }
    }
}
